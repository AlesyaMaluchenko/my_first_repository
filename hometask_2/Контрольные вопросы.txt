1. Как расшифровывается ООП, в чём суть отличия от процедурного и функционального программирования?
ООП - объектно-ориентированное программирование. При процедурном программировании происходит разбиение
задачи на набор переменных и подпрограмм и используются процедуры для работы со структурами данных, в то время 
как при ООП происходит разбиение задачи на объекты, которые инкапсулируют данные и методы, при этом объект будет 
работать со своими собственными данными. Функциональное программирование, в отличие от ООП, как следует из названия, 
создаёт программное обеспечение путём составления чистых функций (а не объектов). Все объекты при этом неизменяемы.
2. В чём заключается идея инкапсуляции, как она реализуется на Python?
Идея - ограничить доступ к составляющим объект методам и переменным. В Python реализуется на уровне договорённости
и написания нижнего подчёркивания "_" в начале имени внутреннего (не общедоступного) атрибута.
3. Как называются переменные и функции, принадлежащие экземпляру класса?
Переменная экземпляра класса и метод экземпляра класса, соответственно.
4. Что такое инициализатор класса и чем он отличается от конструктора?
Инициализатор - это метод инициализации для уже созданного экземпляра класса, конструктор же создаёт его.