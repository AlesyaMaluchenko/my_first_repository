1.	Что такое git и чем он отличается от GitHub?
Git – система контроля версий, GitHub – сервер, который предоставляет место для удалённого git-репозитория (есть и другие сервера, но этот довольно удобный и бесплатный)
2.	Зачем использовать git и подобные ему системы в больших проектах?
Git позволяет сразу нескольким людям работать над общим проектом и видеть дополнения, произведённые коллегами, отслеживать время, когда были внесены изменения и кем, и при обнаружении недочётов вернуться к прежним версиям (то есть старые версии хранятся).
3.	Какие основные термины используются при работе с git?
Репозиторий – дерево изменений проекта (или папка, директорию состояния которой мы отслеживаем). Удалённый репозиторий – репозиторий, которым связаны пользователи. После создания нового репозитория дерево содержит только одну ветку. Ветка состоит из коммитов, расположенных в хронологическом порядке. Ветка — указатель на коммит. Коммит (от слова commit - фиксировать) — логическая единица изменений. Можно «откатить» (отменить) изменения любого из коммитов. Для любого коммита из истории можно создать указатель, то есть ветку. Индекс — изменения, которые будут зафиксированы при следующем коммите. Основные команды: clone – команда создания копии удалённого репозитория, commit – сохраняется текущее состояние файла, время, название, pull – подтягивает изменения с удалённого репозитория на локальный, push – с локального на удалённый.
4.	В каких случаях имеет смысл создавать различные ветки проекта?
Пусть есть программа, в которой обнаружилась ошибка. Для её устранения существуют ветки. Чтобы не трогать исходную версию (иначе программа может полететь), создаём ветку, в ветке исправляем ошибку и затем уже меняем исходную версию.
5.	В чем отличия merge и rebase? В чем преимущества и недостатки последнего из них?
Merge и rebase ¬– это два подхода к слиянию веток. Merge: независимо от того, созданы ли ветки для тестирования, исправления ошибок или по другим причинам, слияние фиксирует изменения в другом месте; слияние принимает содержимое ветки источника и объединяет их с целевой веткой; в этом процессе изменяется только целевая ветка; история исходных веток остается неизменной; сохраняется история и хронологический порядок. Rebase: сжимает все изменения в один «патч», затем он интегрирует патч в целевую ветку; в отличие от слияния, перемещение перезаписывает историю, потому что она передает завершенную работу из одной ветки в другую; в процессе устраняется нежелательная история. Rebase сохраняет идею разработки, но теряется история.
6.	В чем отличия централизованных СКВ от децентрализованных?
Централизованная СКВ: все запросы идут через сервер (пример – google-таблицы), недостатки: зависимость от одного сервера, у пользователей нет локальных копий, если нет доступа к серверу, то нет доступа к актуальной версии, преимущества: сервер в реальном времени контролирует актуальное состояние. Децентрализованная СКВ: нет какой-то жёстко заданной структуры репозиториев с центральным сервером, у каждого есть свой полноценный репозиторий, преимущество: если связь между удалённым и локальным репозиториями нарушится, пользователь всё равно сможет вносить изменения, недостаток: каждый пользователь загружает и модифицирует файл, но может вовремя не синхронизируется с остальными разработчиками.
